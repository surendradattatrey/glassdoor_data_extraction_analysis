#            ,raxlab = NULL
#            ,unit = NULL
#            ,top.labels = c("Yes",
#                            "Words",
#                            "No")
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
#            ,gap = 2000
#            ,laxlab = NULL
#            ,raxlab = NULL
#            ,unit = NULL
#            ,top.labels = c("Yes",
#                            "Words",
#                            "No")
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
,gap = 2000
#            ,laxlab = NULL
#            ,raxlab = NULL
#            ,unit = NULL
#            ,top.labels = c("Yes",
#                            "Words",
#                            "No")
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
#             ,gap = 2000
,laxlab = NULL
#            ,raxlab = NULL
#            ,unit = NULL
#            ,top.labels = c("Yes",
#                            "Words",
#                            "No")
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
#             ,gap = 2000
,laxlab = NULL
,raxlab = NULL
#            ,unit = NULL
#            ,top.labels = c("Yes",
#                            "Words",
#                            "No")
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
#             ,gap = 2000
,laxlab = NULL
,raxlab = NULL
,unit = NULL
#            ,top.labels = c("Yes",
#                            "Words",
#                            "No")
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
#             ,gap = 2000
,laxlab = NULL
,raxlab = NULL
,unit = NULL
,top.labels = c("Yes",
"Words",
"No")
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
,laxlab = NULL
,raxlab = NULL
,unit = NULL
,top.labels = c("Yes",
"Words",
"No")
,gap = 2000
)
# Make pyramid plot
pyramid.plot(top25_df$x, top25_df$y
,labels = top25_df$labels
,main = "Words in Common"
,laxlab = NULL
,raxlab = NULL
,unit = NULL
,top.labels = c("Yes",
"Words",
"No")
,gap = 200
)
review_tdm2 <- removeSparseTerms(review_tdm, sparse = 0.9)
hc <- hclust(d = dist(review_tdm2, method = "euclidean"), method = "complete")
# Plot a dendrogram
plot(hc)
################################################# Bi gram ###########################################################
##Create bi-grams
review_bigram <- tokens(review$Pros) %>%
tokens_remove("\\p{P}", valuetype = "regex", padding = TRUE) %>%
tokens_remove(stopwords("english"), padding  = TRUE) %>%
tokens_ngrams(n = 2) %>%
dfm()
topfeatures(review_bigram)
################################################# Bi gram ###########################################################
##Create bi-grams
review_bigram <- tokens(review$Pros) %>%
tokens_remove("\\p{P}", valuetype = "regex", padding = TRUE) %>%
tokens_remove(stopwords("english"), padding  = TRUE) %>%
tokens_ngrams(n = 3) %>%
dfm()
topfeatures(review_bigram)
{
print(i)
}
df_data <- as.Date.factor(file.spglobal)
df_data <- as.data.frame(file.spglobal)
{
print(i)
}
length(df_data)
df_data
rm(list = ls())
require(tidytext)
require(tidyr)
require(dplyr)
sentiments
sentiments %>%
filter(lexicon == "AFINN") %>%
head()
file.spglobal=read.csv("C:/Users/surendra_dattatrey/Desktop/S&P Data/VIBE Survey/2018 VIBE survey/Empowerment_2018.csv")
df_data <- as.data.frame(file.spglobal)
bing = get_sentiments("bing")   # put all of the bing sentiment dict into object 'bing'
bing     # view bing object
for (i in 1:length(df_data))
{
print(i)
}
View(df_data)
for (i in 1:length(df_data$Text.Response))
{
print(i)
}
require(qdap) || install.packages("qdap") # ensure java is up to date!
library(qdap)
sentiments
rm(list = ls())
require(tidytext)
require(tidyr)
require(dplyr)
require(qdap) || install.packages("qdap") # ensure java is up to date!
library(qdap)
sentiments
sentiments %>%
filter(lexicon == "AFINN") %>%
head()
file.spglobal=read.csv("C:/Users/surendra_dattatrey/Desktop/S&P Data/VIBE Survey/2018 VIBE survey/Empowerment_2018.csv")
df_data <- as.data.frame(file.spglobal)
bing = get_sentiments("bing")   # put all of the bing sentiment dict into object 'bing'
bing     # view bing object
for (i in 1:length(df_data$Text.Response))
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
t1 = Sys.time()   # set timer
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
}
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
t1 = Sys.time()   # set timer
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
df_data$pol_val <- pol
}
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
t1 = Sys.time()   # set timer
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
x
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
print (x)
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
print (x)
print (i)
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
length(df_data$Text.Response)
{
#x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
#print (x)
print (i)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
length(df_data$Text.Response)
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
print (x)
print (i)
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
nrow(df_data)
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
print (x)
print (i)
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
#print (x)
#print (i)
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data[i,]
#x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data[i,]
print(df_data[i,])
#x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
df_data[i,]
{
x <- df_data$Text.Response[i]
# apply polarity() func from qdap to compute sentiment polarity
print (x)
print (i)
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
print (x)
print (i)
pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
print (x)
print (i)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
print (x)
print (i)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
tokens <- data_frame(text = x) %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
rm(list = ls())
require(tidytext)
require(tidyr)
require(dplyr)
require(qdap) || install.packages("qdap") # ensure java is up to date!
library(qdap)
sentiments
sentiments %>%
filter(lexicon == "AFINN") %>%
head()
file.spglobal=read.csv("C:/Users/surendra_dattatrey/Desktop/S&P Data/VIBE Survey/2018 VIBE survey/Empowerment_2018.csv")
df_data <- as.data.frame(file.spglobal)
bing = get_sentiments("bing")   # put all of the bing sentiment dict into object 'bing'
bing     # view bing
for (i in 1:nrow(df_data))
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
tokens <- x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- data.frame(x)
tokens <- x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
df_x <- data.frame(x)
#tokens <- x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
df_x <- data.frame(x)
tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
df_x <- data.frame(x)
tokens <- df_x %>% unnest_tokens_(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
output<- 'word'
input<- 'text'
# apply polarity() func from qdap to compute sentiment polarity
df_x <- data.frame(x)
tokens <- df_x %>% unnest_tokens_(output, input)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
type(x)
#tokens <- df_x %>% unnest_tokens_(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
typeof(x)
#tokens <- df_x %>% unnest_tokens_(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
typeof(x)
print(x)
#tokens <- df_x %>% unnest_tokens_(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- data.frame(x)
#tokens <- df_x %>% unnest_tokens_(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- data.frame(x)
tokens <- df_x %>% unnest_tokens_(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- data.frame(x)
tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- data.frame(x)
typeof(x)
typeof(df_x)
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- data.frame(x)
print (typeof(x))
print (typeof(df_x))
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- as.data.frame(x)
print (typeof(x))
print (typeof(df_x))
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- as.data.frame(x)
df_x
print (typeof(x))
print (typeof(df_x))
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- as.data.frame(x)
print (df_x)
print (typeof(x))
print (typeof(df_x))
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x <- as.character(x)
df_x <- as.data.frame(x)
print (df_x)
#print (typeof(x))
#print (typeof(df_x))
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x_c <- as.character(x)
df_x <- as.data.frame(x_c)
print (df_x)
#print (typeof(x))
#print (typeof(df_x))
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
{
x <- df_data$Text.Response
# apply polarity() func from qdap to compute sentiment polarity
x_c <- as.character(x)
df_x <- as.data.frame(x_c)
#print (df_x)
#print (typeof(x))
print (typeof(df_x))
#tokens <- df_x %>% unnest_tokens(word, text)
#pol = qdap::polarity(x)         # Calculate the polarity from qdap dictionary
#pol
}
